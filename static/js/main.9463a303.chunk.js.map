{"version":3,"sources":["components/Links.js","components/NameChips.js","components/Name.js","components/SubHeader.js","components/Skills.js","components/Aboutme.js","components/Projects.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","display","justifyContent","flexWrap","margin","spacing","icon_classes","className","href","target","rel","fontSize","color","NameChips","classes","Chip","variant","size","label","Typography","Links","props","gutterBottom","marginBottom","skill_list","desc","SkillLine","Skills","SubHeader","map","skill","padding","AboutMe","subheader","marginTop","projectList","title","url","repo","ProjectLine","ProjectLink","GithubLink","Projects","project","textAlign","width","backgroundColor","chip","marginRight","header","section","section3","App","Name","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9463a303.chunk.js","sourcesContent":["import React from 'react';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport GitHubIcon from '@material-ui/icons/GitHub';\nimport LinkedInIcon from '@material-ui/icons/LinkedIn';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        display: 'flex',\n        justifyContent: 'center',\n        flexWrap: 'wrap',\n        '& > *': {\n            margin: theme.spacing(1),\n        },\n    },\n}));\n\nexport default () => {\n    const icon_classes = useStyles();\n    return (\n            <div className={icon_classes.root}>\n            <a href=\"https://github.com/jdao55\" target=\"_blank\" rel=\"noopener noreferrer\">\n                <GitHubIcon fontSize='large' color='action'/>\n            </a>\n            <a href=\"https://www.linkedin.com/in/joseph-dao-1088909a/\" target=\"_blank\" rel=\"noopener noreferrer\">\n                <LinkedInIcon fontSize='large' color='action'/>\n            </a>\n            </div>\n    )\n}\n","import React from 'react'\n\nimport Chip from '@material-ui/core/Chip';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n    justifyContent: 'center',\n    flexWrap: 'wrap',\n    '& > *': {\n      margin: theme.spacing(0.7),\n    },\n  },\n}));\n\n\nconst NameChips = () => {\n    const classes = useStyles();\n    return (\n        <div className={classes.root}>\n            <Chip variant=\"outlined\" size=\"small\" label=\"Software Developer\" />\n            <Chip variant=\"default\" size=\"small\" label=\"Available for Hire\" />\n        </div>\n    )\n}\n\nexport default NameChips\n","import React from 'react'\nimport Typography from '@material-ui/core/Typography';\nimport Links from './Links.js'\nimport NameChips from './NameChips.js'\n\nexport default () => {\n    return (\n        <div>\n            <Typography variant=\"h2\">\n            Joseph Dao\n            </Typography>\n            <NameChips/>\n            <Links/>\n        </div>\n    )\n}\n","import React from 'react'\n\nimport Typography from '@material-ui/core/Typography';\n\nexport default (props) => {\n    return (\n        <div>\n            <Typography gutterBottom variant=\"h5\">\n                {props.label}\n            </Typography>\n        </div>\n    )\n}\n","import React from 'react'\nimport SubHeader from './SubHeader.js'\n\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        display: 'inline',\n        justifyContent: 'center',\n        flexWrap: 'wrap',\n        '& > *': {\n            margin: theme.spacing(0.5),\n        },\n        marginBottom: '1.5rem'\n    },\n}));\n\nconst skill_list = [\n    {\n        label: \"Programming Languages\",\n        desc: \"C++, Rust, C#, Go, Python, C#, C\"\n    },\n    {\n        label: \"Operatating Systems\",\n        desc: \"Linux (debian, rpm based), Windows\"\n    },\n    {\n        label: \"Databases\",\n        desc: \"MySQL, Maria, Oracle\"\n    },\n    {\n        label: \"Other\",\n        desc: \"git, Jira, Cmake, gdb/lldb, React, Django, .NET, conan, googletest, boost c++\"\n    }\n]\n\nconst SkillLine = (props) => {\n    const classes = useStyles();\n    return (\n         <div>\n        <Typography className={classes.root} variant=\"overline\" gutterBottom>\n            <b>{props.label}:</b>\n        </Typography>\n            {props.desc}\n        </div>\n    )\n}\n\nconst Skills = () => {\n    return (\n        <div>\n            <SubHeader label='Technical Skills'/>\n            {skill_list.map(skill => <SkillLine label={skill.label} desc={skill.desc}/>)}\n        </div>\n    )\n}\nexport default Skills\n","import React from 'react'\nimport SubHeader from './SubHeader.js'\n\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        display: 'inline',\n        justifyContent: 'left',\n        flexWrap: 'wrap',\n        // '& > *': {\n        //     margin: theme.spacing(1.5)\n        // },\n        padding: '30 300px',\n    },\n}));\n\nconst AboutMe = () => {\n    const classes = useStyles();\n    return (\n            <div className={classes.root}>\n                <SubHeader label='About Me'/>\n                     Recent Graduate from University of Windsor. Primarly a C++ and rust\n                     Developer, with pervious work experience with .Net and react\n            </div>\n    )\n}\n\n\nexport default AboutMe\n","import React from 'react'\nimport SubHeader from './SubHeader.js'\n\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport GitHubIcon from '@material-ui/icons/GitHub';\nimport Divider from '@material-ui/core/Divider';\nimport LinkIcon from '@material-ui/icons/Link';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        display: 'inline',\n        justifyContent: 'center',\n        flexWrap: 'wrap',\n        '& > *': {\n            margin: theme.spacing(0.8),\n        },\n\n    },\n    subheader: {\n        marginTop: '10px'\n    }\n}));\n\n\nconst projectList = [\n    {\n        title: \"GSP graph Recognition\",\n        desc: \"Implementation of a Research paper which recognizes general series parallel graphs in linear time\",\n        url: \"\",\n        repo: \"\"\n    },\n    {\n        title: \"Ray tracer\",\n        desc: \"A multithreaded toy ray tracer implemented in C++\",\n        url: \"https://github.com/jdao55/ray-tracer\",\n        repo: \"https://github.com/jdao55/ray-tracer\"\n    },\n    {\n        title: \"Img-Print\",\n        desc: \"CLI tool that prints images to termial as text implemented in Rust\",\n        url: \"https://github.com/jdao55/rust-img-print\",\n        repo: \"https://github.com/jdao55/rust-img-print\"\n    },\n    {\n        title: \"toy-compiler\",\n        desc: \"Toy compiler implementd in c++ and llvm\",\n        url: \"https://github.com/jdao55/toy-compiler\",\n        repo: \"https://github.com/jdao55/toy-compiler\"\n    }\n]\nconst ProjectLine = (props) => {\n    const classes = useStyles();\n\n    return (\n            <div>\n            {/* <Divider light/> */}\n            <Typography className={classes.root} variant=\"overline\" gutterBottom>\n            <div>\n                <b>{props.title}</b> | {props.desc}\n            </div>\n                <ProjectLink url={props.url}/>\n                <GithubLink repo={props.repo}/>\n        </Typography>\n        </div>\n    )\n}\n\nconst ProjectLink = (props) => {\n    if (props.url) {\n        return (\n            <a href={props.url} target=\"_blank\" rel=\"noopener noreferrer\">\n                <LinkIcon color='action'/>\n            </a>\n        )\n    } else {\n        return (\n            <div></div>\n        )\n    }\n}\n\n\nconst GithubLink = (props) => {\n    if (props.repo) {\n        return (\n            <a href={props.repo} target=\"_blank\" rel=\"noopener noreferrer\">\n                <GitHubIcon color='action'/>\n            </a>\n        )\n    } else {\n        return (\n            <div></div>\n        )\n    }\n}\nconst Projects = () => {\n    const classes = useStyles();\n\n    return (\n        <div className={classes.subheader}>\n        <SubHeader label=\"Projects\"/>\n            <div className={classes.root}>\n                {projectList.map(project => <ProjectLine title={project.title} desc={project.desc} url={project.url} repo={project.repo}/>)}\n            </div>\n        </div>\n    )\n}\n\nexport default Projects\n","import React from 'react';\nimport './App.css';\nimport Name from './components/Name.js'\nimport Skills from './components/Skills'\nimport AboutMe from './components/Aboutme.js'\nimport Projects from './components/Projects.js'\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n      textAlign: 'center',\n      width: '100%',\n      backgroundColor: '#dbdde3',\n  },\n  chip: {\n      marginRight: theme.spacing(1),\n  },\n  header: {\n      margin: theme.spacing(3),\n  },\n  section: {\n      margin: theme.spacing(2),\n  },\n  section3: {\n        margin: theme.spacing(5, 1, 1),\n  },\n}));\n\n\nfunction App() {\n    const classes=useStyles();\n    return (\n            <div className={classes.root}>\n            <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap\" />\n            <link rel=\"stylesheet\"\n        href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" />\n\n            <Name/>\n            <AboutMe/>\n            <Projects/>\n\n            <Skills/>\n\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}